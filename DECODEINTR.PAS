unit DECODEINTR;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 10/10/2013                                            }
{    Generated Time: 8:23:43 AM                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> c:\saphirp\data\DECODEINTR.H <=}

//{$INCLUDE "extcode.h"}
{ #pragma pack(push) }
{ #pragma pack(1) }

{$IFDEF __cplusplus}
{$ENDIF}

var
  DecodeInstructionsMatlab: procedure(adresseDeBase: LongInt;
                                      ChaNe: PCHAR;
                                      TableauIn: PDouble;
                                      lenIn: LongInt;
                                      TableauOut: PDouble;
                                      var lenOut: LongInt;
                                      var code: LongInt) cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

var
  LVDLLStatus: function(errStr: PChar; 
                        errStrLen: Integer; 
                        module: Pointer): LongInt cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{$IFDEF __cplusplus}
{$ENDIF}

{ #pragma pack(pop) }



var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('DECODEINTR.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
    @DecodeInstructionsMatlab := GetProcAddress(DLLHandle,'DecodeInstructionsMatlab');
  {$IFDEF WIN32}
    Assert(@DecodeInstructionsMatlab <> nil);
  {$ENDIF}
    @LVDLLStatus := GetProcAddress(DLLHandle,'LVDLLStatus');
  {$IFDEF WIN32}
    Assert(@LVDLLStatus <> nil);
  {$ENDIF}
  end
  else
  begin
    DLLLoaded := False;
    { Error: DECODEINTR.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
